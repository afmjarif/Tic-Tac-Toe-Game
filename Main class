public class Main{                                                  //Main class
    public static Scanner scanner = new Scanner(System.in);
    private static Random random = new Random();

    public static void main(String[] args) {
        System.out.println(Colors.CYAN + "üéÆ Welcome to Tic Tac Toe!" + Colors.RESET);
        System.out.println(Colors.GREEN + "Choose Mode: 1. Human vs Human  2. Human vs Computer" + Colors.RESET);
        int mode = scanner.nextInt();
        scanner.nextLine();

        Player p1, p2;
        System.out.print(Colors.GREEN + "Enter name for Player 1 (X): " + Colors.RESET);
        p1 = new Player(scanner.nextLine(), 'X');

        int difficulty = 1;
        if (mode == 1) {
            System.out.print(Colors.GREEN + "Enter name for Player 2 (O): " + Colors.RESET);
            p2 = new Player(scanner.nextLine(), 'O');
        } else {
            p2 = new Player("Computer", 'O');
            System.out.println(Colors.YELLOW + "Choose Computer Difficulty: 1. Easy  2. Hard" + Colors.RESET);
            difficulty = scanner.nextInt();
            scanner.nextLine();
        }

        Board board = new Board();

        while (true) {
            Player currentPlayer = (random.nextBoolean()) ? p1 : p2;
            System.out.println(Colors.CYAN + "\nüé≤ Toss Winner: " + currentPlayer.getName() + " starts first!" + Colors.RESET);

            board.resetBoard();
            board.printBoard();

            while (true) {
                System.out.println(Colors.YELLOW + currentPlayer.getName() + "'s turn (" + currentPlayer.getSymbol() + ")" + Colors.RESET);
                int row, col;

                if (currentPlayer == p2 && mode == 2) {
                    if (difficulty == 1) { 
                        // EASY: random moves
                        do {
                            row = random.nextInt(3);
                            col = random.nextInt(3);
                        } while (!board.placeMove(row, col, currentPlayer.getSymbol()));
                        System.out.println(Colors.BLUE + "Computer (Easy) chose: " + (row + 1) + " " + (col + 1) + Colors.RESET);
                    } else { 
                        // HARD: mini/max
                        int[] bestMove = findBestMove(board.getBoard(), currentPlayer.getSymbol(), p1.getSymbol());
                        board.placeMove(bestMove[0], bestMove[1], currentPlayer.getSymbol());
                        System.out.println(Colors.BLUE + "Computer (Hard) chose: " + (bestMove[0] + 1) + " " + (bestMove[1] + 1) + Colors.RESET);
                    }
                } else {
                    while (true) {
                        System.out.print(Colors.GREEN + "Enter row and column (1-3): " + Colors.RESET);
                        row = scanner.nextInt() - 1;
                        col = scanner.nextInt() - 1;
                        if (board.placeMove(row, col, currentPlayer.getSymbol())) break;
                        System.out.println(Colors.RED + "Invalid move! Try again." + Colors.RESET);
                    }
                }

                board.printBoard();

                if (board.checkWin(currentPlayer.getSymbol())) {
                    System.out.println(Colors.GREEN + "üéâ " + currentPlayer.getName() + " WINS this round!" + Colors.RESET);
                    currentPlayer.addScore();
                    break;
                } else if (board.isFull()) {
                    System.out.println(Colors.PURPLE + "It's a DRAW!" + Colors.RESET);
                    break;
                }

// Switch player
                if (currentPlayer == p1) {
                    currentPlayer = p2;
                } else {
                    currentPlayer = p1;
                }         
            }

            // Show scores for each term..........
            System.out.println(Colors.CYAN + "\nüèÜ Current Scores:" + Colors.RESET);
            System.out.println(Colors.RED + p1.getName() + ": " + p1.getScore() + Colors.RESET);
            System.out.println(Colors.BLUE + p2.getName() + ": " + p2.getScore() + Colors.RESET);

            // Continue or Exit for the next round..........
            System.out.print(Colors.YELLOW + "\nDo you want to continue? (y/n): " + Colors.RESET);
            scanner.nextLine();
            String choice = scanner.nextLine().trim().toLowerCase();
            if (!choice.equals("y")) {
                System.out.println(Colors.PURPLE + "Exiting game... Final Scores:" + Colors.RESET);
                System.out.println(Colors.RED + p1.getName() + ": " + p1.getScore() + Colors.RESET);
                System.out.println(Colors.BLUE + p2.getName() + ": " + p2.getScore() + Colors.RESET);
                System.out.println(Colors.CYAN + "Thanks for playing!" + Colors.RESET);
                break;
            }
        }
    }

    // Mini/max Algorithm to the term............
    private static int evaluate(char[][] board, char ai, char human) {
        // Check win conditions
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                if (board[i][0] == ai) return +10;
                else if (board[i][0] == human) return -10;
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                if (board[0][i] == ai) return +10;
                else if (board[0][i] == human) return -10;
            }
        }
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            if (board[0][0] == ai) return +10;
            else if (board[0][0] == human) return -10;
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            if (board[0][2] == ai) return +10;
            else if (board[0][2] == human) return -10;
        }
        return 0;
    }

    private static boolean isMovesLeft(char[][] board) {
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[i][j] == '-') return true;
        return false;
    }

    private static int minimax(char[][] board, int depth, boolean isMax, char ai, char human) {
        int score = evaluate(board, ai, human);

        if (score == 10) return score - depth;
        if (score == -10) return score + depth;
        if (!isMovesLeft(board)) return 0;

        if (isMax) {
            int best = -1000;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == '-') {
                        board[i][j] = ai;
                        best = Math.max(best, minimax(board, depth + 1, !isMax, ai, human));
                        board[i][j] = '-';
                    }
                }
            }
            return best;
        } else {
            int best = 1000;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == '-') {
                        board[i][j] = human;
                        best = Math.min(best, minimax(board, depth + 1, !isMax, ai, human));
                        board[i][j] = '-';
                    }
                }
            }
            return best;
        }
    }

    private static int[] findBestMove(char[][] board, char ai, char human) {
        int bestVal = -1000;
        int[] bestMove = {-1, -1};

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == '-') {
                    board[i][j] = ai;
                    int moveVal = minimax(board, 0, false, ai, human);
                    board[i][j] = '-';

                    if (moveVal > bestVal) {
                        bestMove[0] = i;
                        bestMove[1] = j;
                        bestVal = moveVal;
                    }
                }
            }
        }
        return bestMove;
    }
}
